{
  "name": "signalrjs",
  "version": "0.2.2",
  "description": "===",
  "main": "index.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjchaplin/signalRJS.git"
  },
  "keywords": [
    "signalr"
  ],
  "author": {
    "name": "Tim Chaplin"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tjchaplin/signalRJS/issues"
  },
  "homepage": "https://github.com/tjchaplin/signalRJS",
  "dependencies": {
    "body-parser": "^1.12.0",
    "connect": "^3.3.4",
    "node-uuid": "^1.4.2"
  },
  "devDependencies": {
    "express": "^4.11.2",
    "gulp": "^3.8.11",
    "gulp-jshint": "^1.9.2",
    "gulp-mocha": "^2.0.0",
    "gulp-util": "^3.0.3",
    "sinon": "~1.12.2"
  },
  "readme": "# signalRJS\r\n===\r\n\r\nA Node.js server implementation of [Signalr](http://signalr.net/).  It works with the [2.0 signalr javascript client](https://github.com/SignalR/bower-signalr)\r\n\r\n[![Build Status](https://travis-ci.org/tjchaplin/signalRJS.svg?branch=master)](https://travis-ci.org/tjchaplin/signalRJS)\r\n\r\n# Install\r\n\r\n```\r\nnpm install signalrjs\r\n```\r\n\r\n# Quick Start - Persistent Connection\r\n\r\n## The Server\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar SignalRJS = require('signalrjs');\r\n\r\nvar signalR = SignalRJS();\r\n\r\nvar server = express();\r\nserver.use(signalR.createListener())\r\nserver.use(express.static(__dirname));\r\nserver.listen(3000);\r\n\r\nsignalR.on('CONNECTED',function(){\r\n\tconsole.log('connected');\r\n\tsetInterval(function () {\r\n\t\tsignalR.send({time:new Date()});\r\n\t},1000)\r\n});\r\n```\r\n\r\n## The Client\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html xmlns=\"\">\r\n<head>\r\n    <script src=\"bower_components/jquery/dist/jquery.js\" type=\"text/javascript\"></script>\r\n    <script src=\"bower_components/signalr/jquery.signalR.js\" type=\"text/javascript\"></script>\r\n    <script type=\"text/javascript\">\r\n        $(function () {\r\n            var connection = $.connection('/signalr');\r\n            connection.error(function(error){\r\n                console.log(error);\r\n            });\r\n            connection.received(function (data) {\r\n                console.log('The time is ' + data.time.toString());\r\n            });\r\n\r\n            connection.start().done(function() {\r\n                console.log(\"connection started!\");\r\n            });\r\n        });\r\n    </script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n\r\n# Quick Start - Hub Connection\r\n\r\n##The Server\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar SignalRJS = require('signalrjs');\r\n\r\n//Init SignalRJs\r\nvar signalR = SignalRJS();\r\n\r\n//Create the hub connection\r\n//NOTE: Server methods are defined as an object on the second argument\r\nsignalR.hub('chatHub',{\r\n\tsend : function(userName,message){\r\n\t\tthis.clients.all.invoke('broadcast').withArgs([userName,message])\r\n\t\tconsole.log('send:'+message);\r\n\t}\r\n});\r\n\r\nvar server = express();\r\nserver.use(express.static(__dirname));\r\nserver.use(signalR.createListener())\r\nserver.listen(3000);\r\n```\r\n\r\n##The Client\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title></title>\r\n    <script src=\"bower_components/jquery/dist/jquery.js\" type=\"text/javascript\"></script>\r\n    <script src=\"bower_components/signalr/jquery.signalR.js\" type=\"text/javascript\"></script>\r\n    <script src=\"signalr/hubs\"></script>\r\n    <script type=\"text/javascript\">\r\n        $(function () {\r\n        \t//Create hub connection\r\n            var connection = $.connection.hub;\r\n            var chatHub = $.connection.chatHub;\r\n\r\n            //Handle a broadcast\r\n            chatHub.client.broadcast = function (broadcastMessage) {\r\n            \tconsole.log(broadcastMessage);\r\n            };\r\n\r\n            $.connection.hub.start().done(function () {\r\n                $('#sendmessage').click(function () {\r\n                \t//Call the hub server send\r\n                    chatHub.server.send('A Message');\r\n                });\r\n            });\r\n        });\r\n    </script>\r\n</head>\r\n<body>\r\n\t<input type=\"button\" id=\"sendmessage\" value=\"Send\" />\r\n</body>\r\n</html>\r\n```\r\n\r\n# Purpose\r\n\r\nThe purpose of this project is to allow developers to use a non .Net platform with SignalR.    \r\n\r\nThe main benefit of this implementation is that it allows front end developers to quickly mockup a Signalr implementation without having to worry about the .Net server side development.  The implementation is not 100% complete, and is not intended for production.\r\n\r\n# Supported Transports\r\n\r\nThe implementation currently supports the following transports:\r\n* Long Polling - IE > 10\r\n* Server Sent Events - Chrome, Firefox, etc\r\n\r\n# Examples\r\nCheck out the Docs section to see an examples for:\r\n* A Time server\r\n* A chat server\r\n* A private server\r\n* A chat server with passport authentication\r\n\r\n# Supported Connections\r\n\r\n## Hubs\r\n\r\n### Hub Servers\r\nHubs define a connection by a name, and a set of available methods.  Signalr makes the server methods '*directly*' callable within the client application like.  Given a client as follows:\r\n```\r\nvar connection = $.connection.hub;\r\nvar chatHub = $.connection.chatHub\r\n\r\nchatHub.server.send('A Message');\r\n```\r\n\r\nThe server would need to have the 'send' method defined in the 'chatHub' as follows:\r\n```javascript\r\nsignalR.hub('chatHub',{\r\n\tsend : function(message){\r\n\r\n\t}\r\n});\r\n```\r\n\r\nFinally, to have the send method communicate to the clients, the server needs to make a call to all clients.  This can be done within a server method by calling the following:\r\n```\r\n//invoke specifies the name of the client function to call\r\n//withArgs specifies the arguments to call the function with\r\nthis.clients.all.invoke('broadcast').withArgs([message])\r\n```\r\n\r\nThe client would then have the following method defined:\r\n```javascript\r\nchatHub.client.broadcast = function (message) {\r\n\tconsole.log('some message:'+message)\r\n};\r\n```\r\n\r\nNow the server can communicate to the clients.\r\n\r\n# Handling User\r\nThese methods are provided to make it easier to set a user for a connection.  If you ar using Signalr .Net you would use Integrated authentication, since signalrjs uses node.js it handles user authentication slightly differet.\r\n\r\n## With the client\r\nSignalrjs provides the ability for clients to set the user name for a connection. NOTE: **this is non-standard** and is not part of the Signalr.\r\n\r\nIn the client this can be done as follows:\r\n```javascript\r\n$.connection.hub.start().done(function () {\r\n    $.connection.$user('anyUserName');\r\n});\r\n```\r\nNOTE: setting a user can only be done after the connection has been set;\r\nSee the privateChat example to see this in action.\r\n\r\n# With Passport\r\nPassport provides the ability to use several *strategies* to manage user authentication.  If you use passport, then signalrjs will automatically set the user for a particular connection.\r\nSee the passportChat example to see this in action.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "signalrjs@0.2.2",
  "_from": "signalrjs@~0.2.2"
}
